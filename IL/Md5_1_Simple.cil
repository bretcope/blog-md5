// Type: Md5DotNet.Md5_1_Simple 
// Assembly: Md5DotNet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 92E8A231-9212-453A-AB87-DB38B4F5E3D4
// Location: C:\code\blog\md5\Md5DotNet\Md5DotNet\bin\Release\Md5DotNet.exe
// Sequence point data from C:\code\blog\md5\Md5DotNet\Md5DotNet\bin\Release\Md5DotNet.pdb

.class private abstract sealed auto ansi beforefieldinit 
  Md5DotNet.Md5_1_Simple
    extends [mscorlib]System.Object
{

  .field private static initonly unsigned int32[] s_sines

  .field private static initonly int32[] s_shifts

  .method public hidebysig static unsigned int8[] 
    GetBytes(
      unsigned int8[] input
    ) cil managed 
  {
    .maxstack 3
    .locals init (
      [0] valuetype Md5DotNet.Md5Digest digest,
      [1] unsigned int8& pinned inputPtr,
      [2] unsigned int8[] V_2
    )

    // [30 20 - 30 42]
    IL_0000: ldarg.0      // input
    IL_0001: dup          
    IL_0002: stloc.2      // V_2
    IL_0003: brfalse.s    IL_000a
    IL_0005: ldloc.2      // V_2
    IL_0006: ldlen        
    IL_0007: conv.i4      
    IL_0008: brtrue.s     IL_000f
    IL_000a: ldc.i4.0     
    IL_000b: conv.u       
    IL_000c: stloc.1      // inputPtr
    IL_000d: br.s         IL_0017
    IL_000f: ldloc.2      // V_2
    IL_0010: ldc.i4.0     
    IL_0011: ldelema      [mscorlib]System.Byte
    IL_0016: stloc.1      // inputPtr

    // [32 17 - 32 60]
    IL_0017: ldloc.1      // inputPtr
    IL_0018: conv.i       
    IL_0019: ldarg.0      // input
    IL_001a: ldlen        
    IL_001b: conv.i4      
    IL_001c: ldloca.s     digest
    IL_001e: conv.u       
    IL_001f: call         void Md5DotNet.Md5_1_Simple::GetDigest(unsigned int8*, int32, valuetype Md5DotNet.Md5Digest*)

    IL_0024: ldc.i4.0     
    IL_0025: conv.u       
    IL_0026: stloc.1      // inputPtr

    // [35 13 - 35 38]
    IL_0027: ldloca.s     digest
    IL_0029: call         instance unsigned int8[] Md5DotNet.Md5Digest::GetBytes()
    IL_002e: ret          

  } // end of method Md5_1_Simple::GetBytes

  .method public hidebysig static void 
    GetDigest(
      unsigned int8* input, 
      int32 length, 
      valuetype Md5DotNet.Md5Digest* digest
    ) cil managed 
  {
    .maxstack 4
    .locals init (
      [0] int32 blocksCount,
      [1] valuetype Md5DotNet.Block paddingBlockData,
      [2] int32 blockIndex,
      [3] int32 offset,
      [4] int32 blockEnd,
      [5] unsigned int32* blockPtr,
      [6] unsigned int32 a,
      [7] unsigned int32 b,
      [8] unsigned int32 c,
      [9] unsigned int32 d,
      [10] int32 bytesRemaining,
      [11] unsigned int8* paddingPtr,
      [12] int32 i,
      [13] unsigned int32 f,
      [14] int32 g,
      [15] unsigned int32 k,
      [16] int32 s,
      [17] unsigned int32 m
    )

    // [41 13 - 41 64]
    IL_0000: ldarg.1      // length
    IL_0001: ldc.i4.8     
    IL_0002: add          
    IL_0003: ldc.i4.s     64 // 0x40
    IL_0005: div          
    IL_0006: ldc.i4.1     
    IL_0007: add          
    IL_0008: stloc.0      // blocksCount

    // [43 13 - 43 36]
    IL_0009: ldarg.2      // digest
    IL_000a: ldc.i4       1732584193 // 0x67452301
    IL_000f: stfld        unsigned int32 Md5DotNet.Md5Digest::A

    // [44 13 - 44 36]
    IL_0014: ldarg.2      // digest
    IL_0015: ldc.i4       -271733879 // 0xefcdab89
    IL_001a: stfld        unsigned int32 Md5DotNet.Md5Digest::B

    // [45 13 - 45 36]
    IL_001f: ldarg.2      // digest
    IL_0020: ldc.i4       -1732584194 // 0x98badcfe
    IL_0025: stfld        unsigned int32 Md5DotNet.Md5Digest::C

    // [46 13 - 46 36]
    IL_002a: ldarg.2      // digest
    IL_002b: ldc.i4       271733878 // 0x10325476
    IL_0030: stfld        unsigned int32 Md5DotNet.Md5Digest::D

    // [48 13 - 48 51]
    IL_0035: ldloca.s     paddingBlockData
    IL_0037: initobj      Md5DotNet.Block

    // [50 18 - 50 36]
    IL_003d: ldc.i4.0     
    IL_003e: stloc.2      // blockIndex

    IL_003f: br           IL_01d7
    // start of loop, entry point: IL_01d7

      // [52 17 - 52 57]
      IL_0044: ldloc.2      // blockIndex
      IL_0045: ldc.i4.s     64 // 0x40
      IL_0047: mul          
      IL_0048: stloc.3      // offset

      // [53 17 - 53 55]
      IL_0049: ldloc.3      // offset
      IL_004a: ldc.i4.s     64 // 0x40
      IL_004c: add          
      IL_004d: stloc.s      blockEnd

      // [57 17 - 57 39]
      IL_004f: ldloc.s      blockEnd
      IL_0051: ldarg.1      // length
      IL_0052: ble.s        IL_00b8

      // [59 21 - 59 42]
      IL_0054: ldloc.3      // offset
      IL_0055: ldarg.1      // length
      IL_0056: blt.s        IL_0079

      // [61 25 - 61 46]
      IL_0058: ldloc.3      // offset
      IL_0059: ldarg.1      // length
      IL_005a: bne.un.s     IL_0067

      // [64 29 - 64 62]
      IL_005c: ldloca.s     paddingBlockData
      IL_005e: conv.u       
      IL_005f: ldc.i4       128 // 0x00000080
      IL_0064: stind.i1     

      // [65 25 - 65 26]
      IL_0065: br.s         IL_006f

      // [69 29 - 69 63]
      IL_0067: ldloca.s     paddingBlockData
      IL_0069: initobj      Md5DotNet.Block

      // [72 25 - 72 68]
      IL_006f: ldloca.s     paddingBlockData
      IL_0071: ldarg.1      // length
      IL_0072: call         instance void Md5DotNet.Block::SetOriginalLength(int32)

      // [73 21 - 73 22]
      IL_0077: br.s         IL_00b1

      // [76 25 - 76 82]
      IL_0079: ldc.i4.s     64 // 0x40
      IL_007b: ldloc.s      blockEnd
      IL_007d: ldarg.1      // length
      IL_007e: sub          
      IL_007f: sub          
      IL_0080: stloc.s      bytesRemaining

      // [77 25 - 77 67]
      IL_0082: ldloca.s     paddingBlockData
      IL_0084: conv.u       
      IL_0085: stloc.s      paddingPtr

      // [78 25 - 78 93]
      IL_0087: ldarg.0      // input
      IL_0088: ldloc.3      // offset
      IL_0089: add          
      IL_008a: conv.u       
      IL_008b: ldloc.s      paddingPtr
      IL_008d: ldloc.s      bytesRemaining
      IL_008f: call         void Md5DotNet.Common::UnsafeMemoryCopy(unsigned int8*, unsigned int8*, int32)

      // [81 25 - 81 59]
      IL_0094: ldloc.s      paddingPtr
      IL_0096: ldloc.s      bytesRemaining
      IL_0098: add          
      IL_0099: ldc.i4       128 // 0x00000080
      IL_009e: stind.i1     

      // [84 25 - 84 71]
      IL_009f: ldc.i4.s     64 // 0x40
      IL_00a1: ldloc.s      bytesRemaining
      IL_00a3: ldc.i4.1     
      IL_00a4: add          
      IL_00a5: sub          
      IL_00a6: ldc.i4.8     
      IL_00a7: blt.s        IL_00b1

      // [85 29 - 85 72]
      IL_00a9: ldloca.s     paddingBlockData
      IL_00ab: ldarg.1      // length
      IL_00ac: call         instance void Md5DotNet.Block::SetOriginalLength(int32)

      // [89 21 - 89 57]
      IL_00b1: ldloca.s     paddingBlockData
      IL_00b3: conv.u       
      IL_00b4: stloc.s      blockPtr

      // [90 17 - 90 18]
      IL_00b6: br.s         IL_00be

      // [93 21 - 93 54]
      IL_00b8: ldarg.0      // input
      IL_00b9: ldloc.3      // offset
      IL_00ba: add          
      IL_00bb: conv.u       
      IL_00bc: stloc.s      blockPtr

      // [96 17 - 96 35]
      IL_00be: ldarg.2      // digest
      IL_00bf: ldfld        unsigned int32 Md5DotNet.Md5Digest::A
      IL_00c4: stloc.s      a

      // [97 17 - 97 35]
      IL_00c6: ldarg.2      // digest
      IL_00c7: ldfld        unsigned int32 Md5DotNet.Md5Digest::B
      IL_00cc: stloc.s      b

      // [98 17 - 98 35]
      IL_00ce: ldarg.2      // digest
      IL_00cf: ldfld        unsigned int32 Md5DotNet.Md5Digest::C
      IL_00d4: stloc.s      c

      // [99 17 - 99 35]
      IL_00d6: ldarg.2      // digest
      IL_00d7: ldfld        unsigned int32 Md5DotNet.Md5Digest::D
      IL_00dc: stloc.s      d

      // [101 22 - 101 31]
      IL_00de: ldc.i4.0     
      IL_00df: stloc.s      i

      IL_00e1: br           IL_019a
      // start of loop, entry point: IL_019a

        // [106 21 - 106 32]
        IL_00e6: ldloc.s      i
        IL_00e8: ldc.i4.s     16 // 0x10
        IL_00ea: bge.s        IL_0100

        // [108 25 - 108 48]
        IL_00ec: ldloc.s      b
        IL_00ee: ldloc.s      c
        IL_00f0: and          
        IL_00f1: ldloc.s      b
        IL_00f3: not          
        IL_00f4: ldloc.s      d
        IL_00f6: and          
        IL_00f7: or           
        IL_00f8: stloc.s      f

        // [109 25 - 109 31]
        IL_00fa: ldloc.s      i
        IL_00fc: stloc.s      g

        // [110 21 - 110 22]
        IL_00fe: br.s         IL_0152

        // [111 26 - 111 37]
        IL_0100: ldloc.s      i
        IL_0102: ldc.i4.s     32 // 0x20
        IL_0104: bge.s        IL_0121

        // [113 25 - 113 48]
        IL_0106: ldloc.s      d
        IL_0108: ldloc.s      b
        IL_010a: and          
        IL_010b: ldloc.s      d
        IL_010d: not          
        IL_010e: ldloc.s      c
        IL_0110: and          
        IL_0111: or           
        IL_0112: stloc.s      f

        // [114 25 - 114 46]
        IL_0114: ldc.i4.5     
        IL_0115: ldloc.s      i
        IL_0117: mul          
        IL_0118: ldc.i4.1     
        IL_0119: add          
        IL_011a: ldc.i4.s     16 // 0x10
        IL_011c: rem          
        IL_011d: stloc.s      g

        // [115 21 - 115 22]
        IL_011f: br.s         IL_0152

        // [116 26 - 116 37]
        IL_0121: ldloc.s      i
        IL_0123: ldc.i4.s     48 // 0x30
        IL_0125: bge.s        IL_013e

        // [118 25 - 118 39]
        IL_0127: ldloc.s      b
        IL_0129: ldloc.s      c
        IL_012b: xor          
        IL_012c: ldloc.s      d
        IL_012e: xor          
        IL_012f: stloc.s      f

        // [119 25 - 119 46]
        IL_0131: ldc.i4.3     
        IL_0132: ldloc.s      i
        IL_0134: mul          
        IL_0135: ldc.i4.5     
        IL_0136: add          
        IL_0137: ldc.i4.s     16 // 0x10
        IL_0139: rem          
        IL_013a: stloc.s      g

        // [120 21 - 120 22]
        IL_013c: br.s         IL_0152

        // [123 25 - 123 42]
        IL_013e: ldloc.s      c
        IL_0140: ldloc.s      b
        IL_0142: ldloc.s      d
        IL_0144: not          
        IL_0145: or           
        IL_0146: xor          
        IL_0147: stloc.s      f

        // [124 25 - 124 42]
        IL_0149: ldc.i4.7     
        IL_014a: ldloc.s      i
        IL_014c: mul          
        IL_014d: ldc.i4.s     16 // 0x10
        IL_014f: rem          
        IL_0150: stloc.s      g

        // [127 21 - 127 35]
        IL_0152: ldloc.s      d

        // [128 21 - 128 27]
        IL_0154: ldloc.s      c
        IL_0156: stloc.s      d

        // [129 21 - 129 27]
        IL_0158: ldloc.s      b
        IL_015a: stloc.s      c

        // [131 21 - 131 40]
        IL_015c: ldsfld       unsigned int32[] Md5DotNet.Md5_1_Simple::s_sines
        IL_0161: ldloc.s      i
        IL_0163: ldelem.u4    
        IL_0164: stloc.s      k

        // [132 21 - 132 41]
        IL_0166: ldsfld       int32[] Md5DotNet.Md5_1_Simple::s_shifts
        IL_016b: ldloc.s      i
        IL_016d: ldelem.i4    
        IL_016e: stloc.s      s

        // [133 21 - 133 41]
        IL_0170: ldloc.s      blockPtr
        IL_0172: ldloc.s      g
        IL_0174: conv.i       
        IL_0175: ldc.i4.4     
        IL_0176: mul          
        IL_0177: add          
        IL_0178: ldind.u4     
        IL_0179: stloc.s      m

        // [135 21 - 135 55]
        IL_017b: ldloc.s      b
        IL_017d: ldloc.s      a
        IL_017f: ldloc.s      f
        IL_0181: add          
        IL_0182: ldloc.s      k
        IL_0184: add          
        IL_0185: ldloc.s      m
        IL_0187: add          
        IL_0188: ldloc.s      s
        IL_018a: call         unsigned int32 Md5DotNet.Md5_1_Simple::LeftRotate(unsigned int32, int32)
        IL_018f: add          
        IL_0190: stloc.s      b

        // [136 21 - 136 31]
        IL_0192: stloc.s      a

        // [101 52 - 101 55]
        IL_0194: ldloc.s      i
        IL_0196: ldc.i4.1     
        IL_0197: add          
        IL_0198: stloc.s      i

        // [101 33 - 101 50]
        IL_019a: ldloc.s      i
        IL_019c: ldc.i4.s     64 // 0x40
        IL_019e: blt          IL_00e6
      // end of loop

      // [139 17 - 139 32]
      IL_01a3: ldarg.2      // digest
      IL_01a4: ldflda       unsigned int32 Md5DotNet.Md5Digest::A
      IL_01a9: dup          
      IL_01aa: ldind.u4     
      IL_01ab: ldloc.s      a
      IL_01ad: add          
      IL_01ae: stind.i4     

      // [140 17 - 140 32]
      IL_01af: ldarg.2      // digest
      IL_01b0: ldflda       unsigned int32 Md5DotNet.Md5Digest::B
      IL_01b5: dup          
      IL_01b6: ldind.u4     
      IL_01b7: ldloc.s      b
      IL_01b9: add          
      IL_01ba: stind.i4     

      // [141 17 - 141 32]
      IL_01bb: ldarg.2      // digest
      IL_01bc: ldflda       unsigned int32 Md5DotNet.Md5Digest::C
      IL_01c1: dup          
      IL_01c2: ldind.u4     
      IL_01c3: ldloc.s      c
      IL_01c5: add          
      IL_01c6: stind.i4     

      // [142 17 - 142 32]
      IL_01c7: ldarg.2      // digest
      IL_01c8: ldflda       unsigned int32 Md5DotNet.Md5Digest::D
      IL_01cd: dup          
      IL_01ce: ldind.u4     
      IL_01cf: ldloc.s      d
      IL_01d1: add          
      IL_01d2: stind.i4     

      // [50 64 - 50 76]
      IL_01d3: ldloc.2      // blockIndex
      IL_01d4: ldc.i4.1     
      IL_01d5: add          
      IL_01d6: stloc.2      // blockIndex

      // [50 38 - 50 62]
      IL_01d7: ldloc.2      // blockIndex
      IL_01d8: ldloc.0      // blocksCount
      IL_01d9: blt          IL_0044
    // end of loop

    // [144 9 - 144 10]
    IL_01de: ret          

  } // end of method Md5_1_Simple::GetDigest

  .method private hidebysig static unsigned int32 
    LeftRotate(
      unsigned int32 'value', 
      int32 rotation
    ) cil managed 
  {
    .maxstack 8

    // [149 13 - 149 69]
    IL_0000: ldarg.0      // 'value'
    IL_0001: ldarg.1      // rotation
    IL_0002: ldc.i4.s     31 // 0x1f
    IL_0004: and          
    IL_0005: shl          
    IL_0006: ldarg.0      // 'value'
    IL_0007: ldc.i4.s     32 // 0x20
    IL_0009: ldarg.1      // rotation
    IL_000a: sub          
    IL_000b: ldc.i4.s     31 // 0x1f
    IL_000d: and          
    IL_000e: shr.un       
    IL_000f: or           
    IL_0010: ret          

  } // end of method Md5_1_Simple::LeftRotate

  .method private hidebysig static specialname rtspecialname void 
    .cctor() cil managed 
  {
    .maxstack 8

    // [7 9 - 17 11]
    IL_0000: ldc.i4.s     64 // 0x40
    IL_0002: newarr       [mscorlib]System.UInt32
    IL_0007: dup          
    IL_0008: ldtoken      field valuetype '<PrivateImplementationDetails>'/'__StaticArrayInitTypeSize=256' '<PrivateImplementationDetails>'::D002CBBE1FF33721AF7C4D1D3ECAD1B7DB5258B7
    IL_000d: call         void [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [mscorlib]System.Array, valuetype [mscorlib]System.RuntimeFieldHandle)
    IL_0012: stsfld       unsigned int32[] Md5DotNet.Md5_1_Simple::s_sines

    // [19 9 - 25 11]
    IL_0017: ldc.i4.s     64 // 0x40
    IL_0019: newarr       [mscorlib]System.Int32
    IL_001e: dup          
    IL_001f: ldtoken      field valuetype '<PrivateImplementationDetails>'/'__StaticArrayInitTypeSize=256' '<PrivateImplementationDetails>'::CD121DCCD137E3FFE2B896FC43EB2FEBD8FE292A
    IL_0024: call         void [mscorlib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [mscorlib]System.Array, valuetype [mscorlib]System.RuntimeFieldHandle)
    IL_0029: stsfld       int32[] Md5DotNet.Md5_1_Simple::s_shifts
    IL_002e: ret          

  } // end of method Md5_1_Simple::.cctor
} // end of class Md5DotNet.Md5_1_Simple
